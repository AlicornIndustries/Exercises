/*
Unoptimized.
*/

const isValid = function(str) {
  const stack = []; // not actually a full stack data structure, just an array used as one
                    // stack[stack.length-1] is top of stack


  // Main loop
  for(let i=0; i<str.length; i++) {
    if(str[i] === '(' || str[i] === '[' || str[i] === '{' ) {
      stack.push(str[i])
    }
    // else, it's a closing
    // stack.length!==0: ensures a closing without an opening is false.
    else if(str[i] === ')' && stack[stack.length-1] === '(' && stack.length!==0) {
      stack.pop();
    }
    else if(str[i] === ']' && stack[stack.length-1] === '[' && stack.length!==0) {
      stack.pop();
    }
    else if(str[i] === '}' && stack[stack.length-1] === '{' && stack.length!==0) {
      stack.pop();
    }
    else {
          console.log(`i: ${i}`)
          console.log(stack);
      return false;
    }
    
  }
  console.log(stack);
  return stack.length === 0;
}


/*
012345
(()[])

i=0:
	stack-> (
i=1:
	stack-> ((
i=2:
	str[2]==) closing. if top of stack == opening of same flavor, pop the top.
	stack-> (
i=3:
	stack-> ([
i=4:
	str[4]==] closing. Matches flavor of top of stack, pop.
	stack-> (
i=5:
	str[5]==) closing.
	stack-> empty

If stack is empty, return true. Else, return false.
	

*/
